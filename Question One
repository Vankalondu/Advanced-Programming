BaseTransaction Class:

import java.util.Calendar;

/**
 * BaseTransaction class implements the TransactionInterface.
 * Represents the common properties and methods for all transactions.
 */
public abstract class BaseTransaction implements TransactionInterface {
    protected double amount;
    protected Calendar date;
    protected String transactionID;

    public BaseTransaction(double amount, Calendar date, String transactionID) {
        this.amount = amount;
        this.date = date;
        this.transactionID = transactionID;
    }

    @Override
    public double getAmount() {
        return amount;
    }

    @Override
    public Calendar getDate() {
        return date;
    }

    @Override
    public String getTransactionID() {
        return transactionID;
    }

    @Override
    public void printTransactionDetails() {
        System.out.println("Transaction ID: " + transactionID);
        System.out.println("Amount: " + amount);
        System.out.println("Date: " + date.getTime());
    }

    @Override
    public abstract void apply(BankAccount ba); // Abstract method to be implemented by subclasses
}

DepositTransaction Class:
/**
 * DepositTransaction class represents a deposit operation.
 * It increases the account balance by the deposit amount.
 */
public class DepositTransaction extends BaseTransaction {

    public DepositTransaction(double amount, Calendar date, String transactionID) {
        super(amount, date, transactionID);
    }

    @Override
    public void apply(BankAccount ba) {
        ba.deposit(amount); // Increase the balance by the deposit amount
    }
}

WithdrawalTransaction Class:
/**
 * WithdrawalTransaction class represents a withdrawal operation.
 * It decreases the account balance by the withdrawal amount.
 */
public class WithdrawalTransaction extends BaseTransaction {

    public WithdrawalTransaction(double amount, Calendar date, String transactionID) {
        super(amount, date, transactionID);
    }

    @Override
    public void apply(BankAccount ba) {
        try {
            if (ba.getBalance() < amount) {
                throw new InsufficientFundsException("Insufficient balance for withdrawal.");
            }
            ba.withdraw(amount); // Withdraw the specified amount
        } catch (InsufficientFundsException e) {
            System.out.println(e.getMessage()); // Handle exception
        } finally {
            System.out.println("Transaction attempted.");
        }
    }

    // Reverses the withdrawal, restoring the original balance
    public boolean reverse(BankAccount ba) {
        ba.deposit(amount); // Restore the withdrawn amount to the account
        return true;
    }
}

